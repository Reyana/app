/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package stock.util.dial;

import java.util.List;
import java.util.Vector;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;
import stock.util.Ipad_Ignore;
import stock.util.Serveur_Ignore;
    
    /**
 *
 * @author Magency
 */
public class DialogueAvertissement extends javax.swing.JFrame {


    /**
		 * 
		 */
		private static final long serialVersionUID = 1L;
	/**
     * Creates new form NewJDialog
     */
    public DialogueAvertissement( JFrame parent, boolean modal) {
        super();
        initComponents();
        // Place le fenetre au centre de la fenetre parent
        this.setLocationRelativeTo(parent);
        
    }
    public DialogueAvertissement( JDialog parent, boolean modal) {
        super();
        initComponents();
        // Place le fenetre au centre de la fenetre parent
        this.setLocationRelativeTo(parent);
        
    }
        public DialogueAvertissement( JFrame parent, boolean modal, String txt_2) {
        this(parent, modal);
        this.jScrollPane.setVisible(false);
        this.txt1.setText("");
        this.txt2.setText(txt_2);
        this.btnOK.setText("OK");
    }
        public DialogueAvertissement( JDialog parent, boolean modal, String txt_2) {
            this(parent, modal);
            this.jScrollPane.setVisible(false);
            this.txt1.setText("");
            this.txt2.setText(txt_2);
            this.btnOK.setText("OK");
        }
    public DialogueAvertissement( JFrame parent, boolean modal, String txt1, String txt2) {
        this(parent, modal);
        this.jScrollPane.setVisible(false);
        this.txt1.setText(txt1);
        this.txt2.setText(txt2);
        this.btnOK.setText("OK");
    }
  
    public DialogueAvertissement( JFrame parent, boolean modal, List<Ipad_Ignore> tabIpads,String text) {
        this(parent, modal);
        
        this.jScrollPane.setVisible(true);
        int i ;
        for (i = 0; i < tabIpads.size(); i++)
        {
            afficheIpad(tabIpads.get(i));
            System.out.println(tabIpads.get(i).getRfid());
        }
        
        this.txt1.setText("");
        this.txt2.setText(text);
        this.btnOK.setText("OK");
    }              
    
    public DialogueAvertissement( JDialog parent, boolean modal, List<Ipad_Ignore> tabIpads,String text) {
        this(parent, modal);
        
        this.jScrollPane.setVisible(true);
        int i ;
        for (i = 0; i < tabIpads.size(); i++)
        {
            afficheIpad(tabIpads.get(i));
            System.out.println(tabIpads.get(i).getRfid());
        }
        
        this.txt1.setText("");
        this.txt2.setText(text);
        this.btnOK.setText("OK");
    }              
        
    public DialogueAvertissement(JFrame parent, boolean modal, int longueur, int largeur) {
        this(parent, modal);
        this.setSize(new java.awt.Dimension(longueur / 2, largeur / 2));
        this.setLocationRelativeTo(parent);
    }
  
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        btnOK = new javax.swing.JButton();
        panelCentre = new javax.swing.JPanel();
        txt1 = new javax.swing.JLabel();
        txt2 = new javax.swing.JLabel();
        jScrollPane = new javax.swing.JScrollPane();
        tab = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("ATTENTION");

        btnOK.setText("Oui");
        btnOK.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnOKMouseClicked(evt);
            }
        });
        jPanel1.add(btnOK);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        java.awt.GridBagLayout panelCentreLayout = new java.awt.GridBagLayout();
        panelCentreLayout.columnWidths = new int[] {0, 0, 0};
        panelCentreLayout.rowHeights = new int[] {0, 20, 0, 20, 0, 20, 0};
        panelCentre.setLayout(panelCentreLayout);

        txt1.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        txt1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        txt1.setText("La duree de garantie est au mauvais format");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        panelCentre.add(txt1, gridBagConstraints);

        txt2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txt2.setText("Format correct : 1 ans - 5 jours - 2 semaines");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        panelCentre.add(txt2, gridBagConstraints);

        jScrollPane.setMinimumSize(new java.awt.Dimension(512, 512));
        jScrollPane.setPreferredSize(new java.awt.Dimension(226, 226));

        tab.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        tab.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Code RFID", "Etat"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tab.setAutoCreateRowSorter(true);
        tab.setGridColor(new java.awt.Color(102, 102, 102));
        tab.setRowHeight(30);
        tab.setSelectionBackground(new java.awt.Color(153, 204, 255));
        tab.setSelectionForeground(new java.awt.Color(0, 0, 0));
        jScrollPane.setViewportView(tab);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        panelCentre.add(jScrollPane, gridBagConstraints);

        getContentPane().add(panelCentre, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnOKMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnOKMouseClicked

        this.dispose();
    }//GEN-LAST:event_btnOKMouseClicked

        private void afficheIpad(Ipad_Ignore iPad)
    {
        // Recupere le modele pour ajouter de nouvelles lignes
        DefaultTableModel dtm = (DefaultTableModel)this.tab.getModel();
        
        // Mise en vecteur des infos des iPads de la liste
        Vector row = new Vector();  
        row.add(iPad.getRfid());
        row.add(iPad.getEtat());
        
        // Ajout d'une nouvelle ligne avec les donnees de l'iPad ci-dessus
        dtm.addRow(row);
    }
    

	    private void afficheServeur(Serveur_Ignore sErveur)
    {
        // Recupere le modele pour ajouter de nouvelles lignes
        DefaultTableModel dtm = (DefaultTableModel)this.tab.getModel();
        
        // Mise en vecteur des infos des Serveurs de la liste
        Vector row = new Vector();  
        row.add(sErveur.getRfid());
        row.add(sErveur.getEtat());
        
        // Ajout d'une nouvelle ligne avec les donnees du serveur ci-dessus
        dtm.addRow(row);
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOK;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JPanel panelCentre;
    private javax.swing.JTable tab;
    private javax.swing.JLabel txt1;
    private javax.swing.JLabel txt2;
    // End of variables declaration//GEN-END:variables
}
