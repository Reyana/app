/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package stock.menu.op.recep;

import java.util.List;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import stock.base.Conteneur;
import stock.base.Ipad;
import stock.base.OP;
import stock.util.ColorTableRenderer;


/**
 *
 * @author Magency
 */
public class DialogueDifferences extends javax.swing.JDialog {
    private FenetreOPReception fenMere;
    private OP op;
    private List<Ipad> listIpadsOP;
    
    /**
     * Creates new form NewJDialog
     */
    public DialogueDifferences(java.awt.Frame parent, boolean modal, 
                               OP op, List<Ipad> listIpadsOP) 
    {
        super(parent, modal);
        initComponents();
        // Place le fenetre au centre de la fenetre parent
        this.setLocationRelativeTo(parent);
        
        this.fenMere = (FenetreOPReception) parent;
        
        //cree des copies locales des parametres
        this.listIpadsOP = listIpadsOP;
        this.op = new OP(op);
//        this.listConteneursScannes = new ArrayList<Conteneur>(listConteneursScannes.size());
//        for (Conteneur conteneur : listConteneursScannes)
//        {
//            this.listConteneursScannes.add(new Conteneur(conteneur));
//        }
        
        
        // Affiche de base les differences pour toute l'OP 
        afficheDifferences();
    }
    
    public DialogueDifferences(java.awt.Frame parent, boolean modal, int longueur, int largeur, OP op,  List<Ipad> listIpadsOP) {
        this(parent, modal, op,  listIpadsOP);
        this.setSize(new java.awt.Dimension(longueur / 4 * 3, largeur / 4 * 3));
        this.setLocationRelativeTo(parent);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        panelNord = new javax.swing.JPanel();
        labelNomFenetre = new javax.swing.JLabel();
        panelCentre = new javax.swing.JPanel();
        jScrollPane = new javax.swing.JScrollPane();
        tabIpads = new javax.swing.JTable();
        panelBouton = new javax.swing.JPanel();
        btnOK = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Liste des iPads");
        setMinimumSize(new java.awt.Dimension(400, 300));

        panelNord.setLayout(new java.awt.BorderLayout());

        labelNomFenetre.setFont(new java.awt.Font("Lucida Grande", 0, 36)); // NOI18N
        labelNomFenetre.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelNomFenetre.setText("Différences");
        panelNord.add(labelNomFenetre, java.awt.BorderLayout.CENTER);

        getContentPane().add(panelNord, java.awt.BorderLayout.NORTH);

        panelCentre.setLayout(new java.awt.GridBagLayout());

        jScrollPane.setMinimumSize(new java.awt.Dimension(512, 512));

        tabIpads.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        tabIpads.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Numéro de série", "UDID", "Code RFID", "Etiquette", "Etat"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabIpads.setGridColor(new java.awt.Color(102, 102, 102));
        tabIpads.setRowHeight(30);
        tabIpads.setSelectionBackground(new java.awt.Color(153, 204, 255));
        tabIpads.setSelectionForeground(new java.awt.Color(0, 0, 0));
        jScrollPane.setViewportView(tabIpads);
        tabIpads.getColumnModel().getColumn(0).setCellRenderer(new ColorTableRenderer());
        tabIpads.getColumnModel().getColumn(1).setCellRenderer(new ColorTableRenderer());
        tabIpads.getColumnModel().getColumn(2).setCellRenderer(new ColorTableRenderer());
        tabIpads.getColumnModel().getColumn(3).setCellRenderer(new ColorTableRenderer());
        tabIpads.getColumnModel().getColumn(4).setCellRenderer(new ColorTableRenderer());
        TableRowSorter<TableModel> sorter
        = new TableRowSorter<TableModel>(tabIpads.getModel());
        tabIpads.setRowSorter(sorter);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        panelCentre.add(jScrollPane, gridBagConstraints);

        getContentPane().add(panelCentre, java.awt.BorderLayout.CENTER);

        btnOK.setText("OK");
        btnOK.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnOKMouseClicked(evt);
            }
        });
        panelBouton.add(btnOK);

        getContentPane().add(panelBouton, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnOKMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnOKMouseClicked
        this.dispose();
    }//GEN-LAST:event_btnOKMouseClicked
    

    /**
     * @brief Affiche dans la JTable de la fenetre l'iPad passe en parametre (place en fin de liste)
     * 
     * @param iPad iPad a ajouter dans la liste d'affichage
     */
    private void afficheIpad(Ipad iPad, String etat)
    {
        // Recupere le modele pour ajouter de nouvelles lignes
        DefaultTableModel dtm = (DefaultTableModel)this.tabIpads.getModel();
        
        // Mise en vecteur des infos des iPads de la liste
        Vector row = new Vector();  
        row.add(iPad.getNumSerie());
        row.add(iPad.getUdid());
        row.add(iPad.getRfid());
        row.add(iPad.getEtiquette());
        row.add(etat);
        
        // Ajout d'une nouvelle ligne avec les donnees de l'iPad ci-dessus
        dtm.addRow(row);
        dtm.fireTableRowsInserted(dtm.getRowCount() - 1, dtm.getRowCount() - 1);
    }

    
    /**
     * @brief Affiche la liste de tous les iPads de l'OP
     */
    private void afficheDifferences()
    {
        int i, j, k = 0;
        
        // Affiche tous les iPads de l'OP et regarde s'ils ont ete scannes ou non
        for(i = 0; i < this.op.getListConteneur().size(); i++)
        {
            Conteneur conteneurEnCours = this.op.getListConteneur().get(i);
            for(j = 0; j < conteneurEnCours.getListIpad().size(); j++)
            {
                
                Ipad iPadEnCours = conteneurEnCours.getListIpad().get(j);
                String txtEtat = checkEtat(iPadEnCours);
                afficheIpad(iPadEnCours, txtEtat);
                k++;
            }
        }
        System.out.println(k);
        if (this.listIpadsOP.size()<= k)
        {
            
        }
//        // Rajoute les iPads qui ont ete scannes mais qui ne sont pas associes a l'OP (donc en trop)
//        for(i = 0; i < this.listIpadsOP.size(); i++)
//        {
//                Ipad iPadEnCours = listIpadsOP.get(i);
//                afficheIpad(iPadEnCours, "En trop");
//        }
    }
    
    /**
     * @brief Indique l'iPad passe en parametre a ete scanne ou non
     * @param iPad 
     * @return {@link String} "OK" si scanne, "Manquant" sinon
     */
    private String checkEtat(Ipad iPad)
    {
        int i = 0;
        String textEtat = "Manquant";
        System.out.println("JY SUIS");
        if(!this.listIpadsOP.isEmpty())
        {
            while(i < this.listIpadsOP.size() && textEtat.equals("Manquant"))
            {
                if(this.listIpadsOP.get(i).getRfid().equals(iPad.getRfid()))
                {
                    System.out.println("JY");
                    textEtat = "OK";
                }
//                else
//                {
//                Ipad iPadEnCours = listIpadsOP.get(i);
//                afficheIpad(iPadEnCours, "En trop");
//                }
                i++;
            }
        }
        return textEtat;
    }
    
     
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOK;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JLabel labelNomFenetre;
    private javax.swing.JPanel panelBouton;
    private javax.swing.JPanel panelCentre;
    private javax.swing.JPanel panelNord;
    private javax.swing.JTable tabIpads;
    // End of variables declaration//GEN-END:variables
}
