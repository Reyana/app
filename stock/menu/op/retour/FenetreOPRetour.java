/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package stock.menu.op.retour;


import java.util.List;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;
import stock.base.Conteneur;
import stock.base.Ipad;
import stock.base.OP;
import stock.base.Serveur;
import stock.menu.FenetreMenuPrincipal;
import stock.menu.op.FenetreMenuOP;
import stock.util.connexion.connexion_bdd;
import stock.util.dial.DialogueRechercheZip;
import stock.util.sql.SQL_function;


/**
 *
 * @author Magency
 */
public class FenetreOPRetour extends javax.swing.JFrame {

    private OP op ;
    private OP opRecue;
    private Conteneur conteneur_san;
    /**
     * Creates new form FenetreEntrepotReception
     */
    
    public FenetreOPRetour(OP op) {
        initComponents();
        this.opRecue = op;
        this.op = new OP(op.getNomOP());
        this.txtNomOP.setText(this.op.getNomOP());
        initAffichage();
        calculNbIpadAEnvoyer();
    }
        
        
    public FenetreOPRetour(OP op, int longueur, int largeur) {
        this(op);
        this.setSize(new java.awt.Dimension(longueur, largeur));
        
    }
    


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        btnRetour = new javax.swing.JButton();
        btnHome = new javax.swing.JButton();
        panelTitre = new javax.swing.JPanel();
        labelNomFenetre = new javax.swing.JLabel();
        txtNomOP = new javax.swing.JLabel();
        jScrollPane = new javax.swing.JScrollPane();
        tablRetour = new javax.swing.JTable();
        panelBoutons = new javax.swing.JPanel();
        btnCharger = new javax.swing.JButton();
        btnListe = new javax.swing.JButton();
        btnValider = new javax.swing.JButton();
        panelTexte = new javax.swing.JPanel();
        txtBas1 = new javax.swing.JLabel();
        txtNbiPad = new javax.swing.JLabel();
        txtBas2 = new javax.swing.JLabel();
        panelBoutonsNE1 = new javax.swing.JPanel();
        btnRetirerChariotOP = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(800, 600));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        btnRetour.setIcon(new javax.swing.ImageIcon(getClass().getResource("/stock/images/Bouton Retour.png"))); // NOI18N
        btnRetour.setToolTipText("Retour");
        btnRetour.setBorderPainted(false);
        btnRetour.setContentAreaFilled(false);
        btnRetour.setMinimumSize(new java.awt.Dimension(16, 16));
        btnRetour.setPreferredSize(new java.awt.Dimension(32, 32));
        btnRetour.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnRetourMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 0);
        getContentPane().add(btnRetour, gridBagConstraints);

        btnHome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/stock/images/Bouton Home.PNG"))); // NOI18N
        btnHome.setToolTipText("Home");
        btnHome.setBorderPainted(false);
        btnHome.setContentAreaFilled(false);
        btnHome.setMaximumSize(new java.awt.Dimension(32, 32));
        btnHome.setMinimumSize(new java.awt.Dimension(16, 16));
        btnHome.setPreferredSize(new java.awt.Dimension(32, 32));
        btnHome.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnHomeMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        getContentPane().add(btnHome, gridBagConstraints);

        panelTitre.setLayout(new java.awt.GridBagLayout());

        labelNomFenetre.setFont(new java.awt.Font("Lucida Grande", 1, 36)); // NOI18N
        labelNomFenetre.setForeground(new java.awt.Color(51, 51, 51));
        labelNomFenetre.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelNomFenetre.setText(" : Retour à l'entrepôt");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        panelTitre.add(labelNomFenetre, gridBagConstraints);

        txtNomOP.setFont(new java.awt.Font("Lucida Grande", 1, 36)); // NOI18N
        txtNomOP.setForeground(new java.awt.Color(51, 51, 51));
        txtNomOP.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        txtNomOP.setText("_");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        panelTitre.add(txtNomOP, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        getContentPane().add(panelTitre, gridBagConstraints);

        jScrollPane.setMinimumSize(new java.awt.Dimension(512, 512));

        tablRetour.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        tablRetour.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nom conteneur", "Nombre d'iPad(s)", "Date d'envoi"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablRetour.setAutoCreateRowSorter(true);
        tablRetour.setGridColor(new java.awt.Color(102, 102, 102));
        tablRetour.setRowHeight(30);
        tablRetour.setSelectionBackground(new java.awt.Color(153, 204, 255));
        tablRetour.setSelectionForeground(new java.awt.Color(0, 0, 0));
        tablRetour.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tablRetour.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tablRetourMousePressed(evt);
            }
        });
        jScrollPane.setViewportView(tablRetour);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jScrollPane, gridBagConstraints);

        panelBoutons.setLayout(new java.awt.GridBagLayout());

        btnCharger.setIcon(new javax.swing.ImageIcon(getClass().getResource("/stock/images/Bouton Charger.PNG"))); // NOI18N
        btnCharger.setToolTipText("Affectation à l'OP d'un conteneur et d'une liste d'iPads");
        btnCharger.setBorderPainted(false);
        btnCharger.setContentAreaFilled(false);
        btnCharger.setFocusPainted(false);
        btnCharger.setMinimumSize(new java.awt.Dimension(128, 128));
        btnCharger.setPreferredSize(new java.awt.Dimension(128, 128));
        btnCharger.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnChargerMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 0.33;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        panelBoutons.add(btnCharger, gridBagConstraints);

        btnListe.setIcon(new javax.swing.ImageIcon(getClass().getResource("/stock/images/Bouton Liste 128.PNG"))); // NOI18N
        btnListe.setToolTipText("Affichage de la liste des iPads du conteneur selectionné");
        btnListe.setBorderPainted(false);
        btnListe.setContentAreaFilled(false);
        btnListe.setEnabled(false);
        btnListe.setFocusPainted(false);
        btnListe.setMinimumSize(new java.awt.Dimension(128, 128));
        btnListe.setPreferredSize(new java.awt.Dimension(128, 128));
        btnListe.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnListeMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 0.33;
        gridBagConstraints.insets = new java.awt.Insets(20, 10, 20, 10);
        panelBoutons.add(btnListe, gridBagConstraints);

        btnValider.setIcon(new javax.swing.ImageIcon(getClass().getResource("/stock/images/Bouton Envoyer.PNG"))); // NOI18N
        btnValider.setToolTipText("Validation de l'envoi des conteneurs à l'OP");
        btnValider.setBorderPainted(false);
        btnValider.setContentAreaFilled(false);
        btnValider.setFocusPainted(false);
        btnValider.setMinimumSize(new java.awt.Dimension(128, 128));
        btnValider.setPreferredSize(new java.awt.Dimension(128, 128));
        btnValider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnValiderMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 0.33;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        panelBoutons.add(btnValider, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(panelBoutons, gridBagConstraints);

        txtBas1.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        txtBas1.setText("Total à envoyer : ");
        txtBas1.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        panelTexte.add(txtBas1);

        txtNbiPad.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        txtNbiPad.setText("_");
        txtNbiPad.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        panelTexte.add(txtNbiPad);

        txtBas2.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        txtBas2.setText("iPad(s)");
        txtBas2.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        panelTexte.add(txtBas2);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        getContentPane().add(panelTexte, gridBagConstraints);

        panelBoutonsNE1.setLayout(new java.awt.GridBagLayout());

        btnRetirerChariotOP.setIcon(new javax.swing.ImageIcon(getClass().getResource("/stock/images/Bouton Moins.PNG"))); // NOI18N
        btnRetirerChariotOP.setToolTipText("Suppression du conteneur selectionné de la base de données");
        btnRetirerChariotOP.setBorderPainted(false);
        btnRetirerChariotOP.setContentAreaFilled(false);
        btnRetirerChariotOP.setEnabled(false);
        btnRetirerChariotOP.setMaximumSize(new java.awt.Dimension(32, 32));
        btnRetirerChariotOP.setMinimumSize(new java.awt.Dimension(16, 16));
        btnRetirerChariotOP.setPreferredSize(new java.awt.Dimension(32, 32));
        btnRetirerChariotOP.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnRetirerChariotOPMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        panelBoutonsNE1.add(btnRetirerChariotOP, gridBagConstraints);

        getContentPane().add(panelBoutonsNE1, new java.awt.GridBagConstraints());

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRetourMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRetourMouseClicked

        FenetreMenuOP fMenuEntrepot = new FenetreMenuOP(this.opRecue, 
                                                this.getWidth(), this.getHeight());
        fMenuEntrepot.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnRetourMouseClicked

    private void btnHomeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnHomeMouseClicked
        FenetreMenuPrincipal fMenuPrincipal = new FenetreMenuPrincipal(this.getWidth(), this.getHeight());
        fMenuPrincipal.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnHomeMouseClicked

    private void btnChargerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnChargerMouseClicked
        String nameSelectedConteneur = "";
        int selectedRowView = this.tablRetour.getSelectedRow();
            if(selectedRowView > -1)
            {
                int selectedRow = this.tablRetour.convertRowIndexToModel(selectedRowView);
                nameSelectedConteneur = this.op.getListConteneur().get(selectedRow).getName();
            }
        DialogueCharger fCharger = new DialogueCharger(this, true, 
                                            this.getWidth(), this.getHeight(),
                                            op, nameSelectedConteneur);
        fCharger.setVisible(true);

        //Mise a jour de l'affichage du nombre d'iPads à envoyer
        calculNbIpadAEnvoyer();      
    }//GEN-LAST:event_btnChargerMouseClicked

    private void btnListeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnListeMouseClicked
        if(this.btnListe.isEnabled())
        {
            int selectedRow = this.tablRetour.convertRowIndexToModel(this.tablRetour.getSelectedRow());
            Conteneur selectedConteneur = this.op.getListConteneur().get(selectedRow);
            DialogueListeIpads fListeIpads = new DialogueListeIpads(this, true, 
                                            this.getWidth(), this.getHeight(),
                                            selectedConteneur.getName().toUpperCase(),
                                            selectedConteneur.getListIpad());
            fListeIpads.setVisible(true);
            
            //Mise a jour de l'affichage du nombre d'iPads à envoyer
            calculNbIpadAEnvoyer();  
        }
    }//GEN-LAST:event_btnListeMouseClicked

    private void tablRetourMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablRetourMousePressed
        this.btnRetirerChariotOP.setEnabled(true);
        this.btnListe.setEnabled(true);
    }//GEN-LAST:event_tablRetourMousePressed

    private void btnValiderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnValiderMouseClicked
        connexion_bdd bdd = new connexion_bdd();
        String nomBDD = bdd.getlocal().getdatabasename();
        bdd.closeall();

       if(!this.op.getNomOP().equalsIgnoreCase(null))
        {
            SQL_function.retourOPvalidee(this.op);
        } 
        DialogueRechercheZip dzip = new DialogueRechercheZip("retourEntrepot", this, true, 
                                                this.getWidth(), this.getHeight(), 
                                                nomBDD, op);
        dzip.setVisible(true);
    }//GEN-LAST:event_btnValiderMouseClicked

    private void btnRetirerChariotOPMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRetirerChariotOPMouseClicked
        if (this.btnRetirerChariotOP.isEnabled())
        {
            DefaultTableModel dtm = (DefaultTableModel) this.tablRetour.getModel();
            int selectedRow = this.tablRetour.convertRowIndexToModel(this.tablRetour.getSelectedRow());
            Conteneur selectedConteneur = this.op.getListConteneur().get(selectedRow);
            this.op.getListConteneur().remove(selectedConteneur);
            dtm.removeRow(selectedRow);
            dtm.fireTableRowsDeleted(selectedRow - 1, selectedRow - 1);

            //Si l'op a deja ete envoyee : retrait de la table OPE_CONTENEURS de la BDD
            SQL_function.retireConteneurOP_Local(selectedConteneur.getName());


            //Mise a jour de l'affichage du nombre d'iPads à envoyer
            calculNbIpadAEnvoyer();
        }
    }//GEN-LAST:event_btnRetirerChariotOPMouseClicked
   
    
    
    /**
     * @brief Calcules le nombre d'iPads a envoyer, et affiche ce nombre dans la fenetre
     */

    private void calculNbIpadAEnvoyer()
    {
        int i;
        int nb = 0;
        
        for (i = 0; i < this.op.getListConteneur().size(); i++)
        {
            nb += this.op.getListConteneur().get(i).getNbIpad();
        }   
        this.txtNbiPad.setText(String.valueOf(nb));
    }
  
    
    
    /**
     * @brief Retires le serveur passé en parametre du conteneur selectionne dans la JTable
     * 
     * @param iPad {@link Ipad} a retirer du conteneur selectionne
     */
    public void retirerIpadSelection(Ipad iPad)
    {
        // Retire de la liste de l'op
        this.op.getListConteneur().get(this.tablRetour.getSelectedRow()).retirerIpad(iPad);
        // MAJ de l'affichage du nb d'iPad dans la JTable
        Integer oldNb = (Integer)this.tablRetour.getValueAt(this.tablRetour.getSelectedRow(), 1); 
        this.tablRetour.setValueAt( oldNb - 1, this.tablRetour.getSelectedRow(), 1);
    }
    
    
    /**
     * @brief Retires l'iPad passe en parametre du conteneur selectionne dans la JTable
     * 
     * @param iPad {@link Ipad} a retirer du conteneur selectionne
     */
    public void retirerServeurSelection(Serveur sErveur)
    {
        // Retire de la liste de l'op
        this.op.getListConteneur().get(this.tablRetour.getSelectedRow()).retirerServeur(sErveur);
        // MAJ de l'affichage du nb d'iPad dans la JTable
        Integer oldNb = (Integer)this.tablRetour.getValueAt(this.tablRetour.getSelectedRow(), 1); 
        this.tablRetour.setValueAt( oldNb - 1, this.tablRetour.getSelectedRow(), 1);
    }
    
    
    /**
     * @brief Affiche la liste des conteneurs de l'OP dans la JTable vide
     */
    private void initAffichage()
    {
        int i;
        for(i = 0; i < this.op.getListConteneur().size(); i++)
        {
            afficheConteneur(this.op.getListConteneur().get(i));
        }
    }
  
    
    
    /**
     * @brief Affiche dans la JTable de la fenetre le conteneur passe en parametre 
     *        (ajoute une nouvelle ligne en bas de la JTable)
     * 
     * @param conteneur {@link Conteneur} a afficher dans la JTable
     */
    private void afficheConteneur(Conteneur conteneur)
    {
        // Recupere le modele pour ajouter de nouvelles lignes
        DefaultTableModel dtm = (DefaultTableModel)this.tablRetour.getModel();
        
        // Mise en vecteur des infos des iPads de la liste
        Vector row = new Vector();
        row.add(conteneur.getName());
        row.add(conteneur.getNbIpad());
        
        // Ajout d'une nouvelle ligne avec les donnees de l'iPad ci-dessus
        dtm.addRow(row);
        dtm.fireTableRowsInserted(dtm.getRowCount() - 1, dtm.getRowCount() - 1);
    }
    
    
    
    /**
     * @brief Ajoutes et affiches un nouveau conteneur a l'OP si pas encore associes
     * 
     * @param conteneur {@link Conteneur} a ajouter
     */
    private void addConteneur(Conteneur conteneur)
    {      
        List<Conteneur> listConteneursOP = this.op.getListConteneur();      
        if(!listConteneursOP.contains(conteneur))
        {
            listConteneursOP.add(conteneur);
            this.afficheConteneur(conteneur);
        }
    }

    
    /**
     * @brief Place dans la JTable les informations relatives au conteneur passe en parametre
     * 
     * @param conteneurScanne {@link Conteneur} chargé
     */
    public void chargeConteneur(Conteneur conteneurScanne)
    {
        boolean trouve = false;
        int j;
        int i = 0;
        while (!trouve && i < this.op.getListConteneur().size())
        {    
            // Si un conteneur de la liste a le meme nom => ajouts des nouveaux iPads dans la liste existante (suppr des doublon)
            if(this.op.getListConteneur().get(i).getName().equals(conteneurScanne.getName()))
            {

                Conteneur conteneurTrouve = this.op.getListConteneur().get(i);
                for(j = 0; j < conteneurScanne.getListIpad().size(); j++)
                {
                    conteneurTrouve.ajouterIpad(conteneurScanne.getListIpad().get(j));
                }
                
                //Modifies dans la JTable la ligne du conteneur passse en parametre
                DefaultTableModel dtm = (DefaultTableModel)this.tablRetour.getModel();
                int indexConteneurDansListe = this.op.getListConteneur().indexOf(conteneurScanne);

                dtm.setValueAt(conteneurTrouve.getName(), indexConteneurDansListe, 0);
                dtm.setValueAt(conteneurTrouve.getNbIpad(), indexConteneurDansListe, 1);
                dtm.fireTableRowsUpdated(indexConteneurDansListe, indexConteneurDansListe); 
            }
            i++;
        }
        if(!trouve)
        {
            // Si pas trouve : ajoute le conteneur a la liste de l'OP, et l'affiche dans la JTable
            addConteneur(conteneurScanne);
        }
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCharger;
    private javax.swing.JButton btnHome;
    private javax.swing.JButton btnListe;
    private javax.swing.JButton btnRetirerChariotOP;
    private javax.swing.JButton btnRetour;
    private javax.swing.JButton btnValider;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JLabel labelNomFenetre;
    private javax.swing.JPanel panelBoutons;
    private javax.swing.JPanel panelBoutonsNE1;
    private javax.swing.JPanel panelTexte;
    private javax.swing.JPanel panelTitre;
    private javax.swing.JTable tablRetour;
    private javax.swing.JLabel txtBas1;
    private javax.swing.JLabel txtBas2;
    private javax.swing.JLabel txtNbiPad;
    private javax.swing.JLabel txtNomOP;
    // End of variables declaration//GEN-END:variables
}
