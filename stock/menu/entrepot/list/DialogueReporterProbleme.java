/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package stock.menu.entrepot.list;

import java.util.List;
import stock.base.Ipad;
import stock.util.connexion.connexion_bdd;
import stock.util.dial.DialogueAvertissement;
import stock.util.sql.SQL_function;

/**
 *
 * @author Magency
 */
public class DialogueReporterProbleme extends javax.swing.JDialog {

    private final FenetreEntrepotListeiPads fenMere;
    private Ipad iPad;
    private String etatIpad;

    /**
     * Creates new form NewJDialog
     */
    public DialogueReporterProbleme(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        // Place le fenetre au centre de la fenetre parent
        this.setLocationRelativeTo(parent);
        this.fenMere = (FenetreEntrepotListeiPads) parent;
        this.rbManquant.setVisible(false);
    }

    public DialogueReporterProbleme(java.awt.Frame parent, boolean modal, int longueur, int largeur) {
        this(parent, modal);
        this.setSize(new java.awt.Dimension(longueur * 3 / 4, largeur * 3 / 4));
        this.setLocationRelativeTo(parent);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        bgEtat = new javax.swing.ButtonGroup();
        labelNomFenetre = new javax.swing.JLabel();
        panelCentre = new javax.swing.JPanel();
        labelSN = new javax.swing.JLabel();
        txtSN = new javax.swing.JTextField();
        panelUdid = new javax.swing.JPanel();
        labelUdid = new javax.swing.JLabel();
        txtUdid = new javax.swing.JTextField();
        labelRfid = new javax.swing.JLabel();
        txtRfid = new javax.swing.JTextField();
        labelEtiquette = new javax.swing.JLabel();
        txtEtiquette = new javax.swing.JTextField();
        labelDateAchat = new javax.swing.JLabel();
        txtDureeGarantie = new javax.swing.JTextField();
        labelDateAchat1 = new javax.swing.JLabel();
        dtAchat = new com.toedter.calendar.JDateChooser();
        panelRadioBoutons = new javax.swing.JPanel();
        rbFonctionnel = new javax.swing.JRadioButton();
        rbCasse = new javax.swing.JRadioButton();
        rbManquant = new javax.swing.JRadioButton();
        panelBoutons = new javax.swing.JPanel();
        btnRetour = new javax.swing.JButton();
        btnOK = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Reporter un iPad cassé ou manquant");
        setMinimumSize(new java.awt.Dimension(600, 450));

        labelNomFenetre.setFont(new java.awt.Font("Lucida Grande", 0, 36)); // NOI18N
        labelNomFenetre.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelNomFenetre.setText("Report d'iPad cassé");
        getContentPane().add(labelNomFenetre, java.awt.BorderLayout.NORTH);

        java.awt.GridBagLayout panelCentreLayout = new java.awt.GridBagLayout();
        panelCentreLayout.columnWidths = new int[] {0, 0, 0};
        panelCentreLayout.rowHeights = new int[] {0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0};
        panelCentre.setLayout(panelCentreLayout);

        labelSN.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        labelSN.setText("Numéro de série :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        panelCentre.add(labelSN, gridBagConstraints);

        txtSN.setEnabled(false);
        txtSN.setPreferredSize(new java.awt.Dimension(100, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        panelCentre.add(txtSN, gridBagConstraints);

        panelUdid.setLayout(new java.awt.GridBagLayout());

        labelUdid.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        labelUdid.setText("UDID :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        panelUdid.add(labelUdid, gridBagConstraints);

        txtUdid.setEnabled(false);
        txtUdid.setPreferredSize(new java.awt.Dimension(100, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        panelUdid.add(txtUdid, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        panelCentre.add(panelUdid, gridBagConstraints);

        labelRfid.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        labelRfid.setText("Scannez l'iPad cassé :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 10, 0);
        panelCentre.add(labelRfid, gridBagConstraints);

        txtRfid.setPreferredSize(new java.awt.Dimension(100, 28));
        txtRfid.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtRfidKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 10);
        panelCentre.add(txtRfid, gridBagConstraints);

        labelEtiquette.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        labelEtiquette.setText("Etiquette :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        panelCentre.add(labelEtiquette, gridBagConstraints);

        txtEtiquette.setEnabled(false);
        txtEtiquette.setPreferredSize(new java.awt.Dimension(100, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        panelCentre.add(txtEtiquette, gridBagConstraints);

        labelDateAchat.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        labelDateAchat.setText("Date d'achat :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        panelCentre.add(labelDateAchat, gridBagConstraints);

        txtDureeGarantie.setEnabled(false);
        txtDureeGarantie.setPreferredSize(new java.awt.Dimension(100, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        panelCentre.add(txtDureeGarantie, gridBagConstraints);

        labelDateAchat1.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        labelDateAchat1.setText("Durée garantie :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        panelCentre.add(labelDateAchat1, gridBagConstraints);

        dtAchat.setDate(java.util.Calendar.getInstance().getTime());
        dtAchat.setDateFormatString("dd/MM/yy");
        dtAchat.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        panelCentre.add(dtAchat, gridBagConstraints);

        panelRadioBoutons.setLayout(new java.awt.GridBagLayout());

        bgEtat.add(rbFonctionnel);
        rbFonctionnel.setSelected(true);
        rbFonctionnel.setText("Fonctionnel");
        rbFonctionnel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                rbFonctionnelMousePressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        panelRadioBoutons.add(rbFonctionnel, gridBagConstraints);

        bgEtat.add(rbCasse);
        rbCasse.setText("Cassé");
        rbCasse.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                rbCasseMousePressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        panelRadioBoutons.add(rbCasse, gridBagConstraints);

        bgEtat.add(rbManquant);
        rbManquant.setText("Manquant");
        rbManquant.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                rbManquantMousePressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        panelRadioBoutons.add(rbManquant, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        panelCentre.add(panelRadioBoutons, gridBagConstraints);

        getContentPane().add(panelCentre, java.awt.BorderLayout.CENTER);

        btnRetour.setText("Retour");
        btnRetour.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnRetourMouseClicked(evt);
            }
        });
        panelBoutons.add(btnRetour);

        btnOK.setText("OK");
        btnOK.setEnabled(false);
        btnOK.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnOKMouseClicked(evt);
            }
        });
        panelBoutons.add(btnOK);

        getContentPane().add(panelBoutons, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRetourMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRetourMouseClicked
        this.dispose();
    }//GEN-LAST:event_btnRetourMouseClicked

    private void btnOKMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnOKMouseClicked
        if (this.btnOK.isEnabled())
        {
            // Recuperes l'etat de l'iPad dans la BDD
            connexion_bdd bdd = new connexion_bdd();
            String etatIpadBDD = SQL_function.getEtatIpad(bdd.getserver().getstatement(), this.iPad.getDbNum());
            
            //Si l'etat est modifie dans la fenetre => modif dans la BDD
            if(!this.etatIpad.equalsIgnoreCase(etatIpadBDD))
            {

//            // Modification de l'etat de l'iPad selectionne dans la BDD
//            String donnee, oldonnee ;
//            int id_ipad = this.iPad.getDbNum();
//            oldonnee = "id_ipad+" + id_ipad + "+";               
//             donnee = "etat+" + this.etatIpad + "+";           
//            InstructionSql modif_ipad_etat = new InstructionSql();
//            modif_ipad_etat.Update_Ipad_etat(donnee, oldonnee);
            
            System.out.println("etat change");

                SQL_function.changeEtatIpad(bdd.getserver().getstatement(), this.iPad.getDbNum(), etatIpadBDD, this.etatIpad, "entrepot");

            }
            
            // Fermes la connection
            bdd.closeall();
                        
            //Suppression de la fenetre
            this.dispose();
        }
    }//GEN-LAST:event_btnOKMouseClicked

    private void txtRfidKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRfidKeyReleased
        boolean rfidTrouve = false;
        int i = 0;
        if (this.txtRfid.getText().equals("")){
            this.txtDureeGarantie.setText(null);
            this.txtUdid.setText(null);
            this.txtSN.setText(null);
            this.txtEtiquette.setText(null);
            this.dtAchat.setDate(null);
        }else if (evt.getKeyChar() == '\n'){
            // Recuperation de l'iPad avec ce champ RFID dans la BDD s'il existe
            // A activer seulement si un iPad a bien ete trouve
            //recherche dans la base de l'ipad
            this.rbFonctionnel.grabFocus();
                //Charger la liste d'Ipad depuis la BDD
                connexion_bdd bdd = new connexion_bdd();
                List<Ipad> listIpad = SQL_function.getListIpadsBDD(bdd.getserver().getstatement());
               
                if(!listIpad.isEmpty())
                {
                    // On recherche dans la liste l'iPad avec le code RFID entre dans la fenetre (normalemnt: 1 seul)
                    while(i < listIpad.size() && !rfidTrouve)
                    {
                        Ipad iPadBDD = listIpad.get(i);
                        if(iPadBDD.getRfid().equalsIgnoreCase(this.txtRfid.getText()))
                        {
                            this.iPad = iPadBDD;
                            rfidTrouve = true;
                        }
                        i++;
                    }
                    if(rfidTrouve)
                    {
                        afficheChampsIpad(this.iPad);
                        this.btnOK.setEnabled(true);
                        
                        // Recupere l'etat de l'iPad scanne dans la BDD
                        this.etatIpad = SQL_function.getEtatIpad(bdd.getserver().getstatement(), this.iPad.getDbNum());
                        if(this.etatIpad.equalsIgnoreCase("casse"))
                        {
                            this.rbCasse.setSelected(true);
                        }
                        else if(this.etatIpad.equalsIgnoreCase("manquant"))
                        {
                            this.rbManquant.setVisible(true);
                            this.rbManquant.setSelected(true);
                        }
                        else
                        {
                            this.rbFonctionnel.setSelected(true);
                        }
                    }
                    else
                    {
                        DialogueAvertissement warning = new DialogueAvertissement(this, true, "Le code RFID entré N'existe pas");
                        warning.setVisible(true);
                    }   
                }
                
                // Fermes la connexon
                bdd.closeall();
        } 
        else 
        {
            this.btnOK.setEnabled(false);
        }
    }//GEN-LAST:event_txtRfidKeyReleased

    private void rbFonctionnelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rbFonctionnelMousePressed
        this.etatIpad = "fonctionnel";
    }//GEN-LAST:event_rbFonctionnelMousePressed

    private void rbCasseMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rbCasseMousePressed
        this.etatIpad = "casse";
    }//GEN-LAST:event_rbCasseMousePressed

    private void rbManquantMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rbManquantMousePressed
        this.etatIpad = "manquant";
    }//GEN-LAST:event_rbManquantMousePressed

    /**
     * @brief Affiche dans chaque champ de la boite de dialogue les informations
     * de l'iPad passe en arametre
     *
     * @param iPad {@link Ipad} dont les onformations sont recuperees
     */
    private void afficheChampsIpad(Ipad iPad) {
        this.txtSN.setText(iPad.getNumSerie());
        this.txtUdid.setText(iPad.getUdid());
        this.txtEtiquette.setText(iPad.getEtiquette());
        this.dtAchat.setDate(iPad.getDateAchat());
        this.txtDureeGarantie.setText(iPad.getDureeGarantie());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgEtat;
    private javax.swing.JButton btnOK;
    private javax.swing.JButton btnRetour;
    private com.toedter.calendar.JDateChooser dtAchat;
    private javax.swing.JLabel labelDateAchat;
    private javax.swing.JLabel labelDateAchat1;
    private javax.swing.JLabel labelEtiquette;
    private javax.swing.JLabel labelNomFenetre;
    private javax.swing.JLabel labelRfid;
    private javax.swing.JLabel labelSN;
    private javax.swing.JLabel labelUdid;
    private javax.swing.JPanel panelBoutons;
    private javax.swing.JPanel panelCentre;
    private javax.swing.JPanel panelRadioBoutons;
    private javax.swing.JPanel panelUdid;
    private javax.swing.JRadioButton rbCasse;
    private javax.swing.JRadioButton rbFonctionnel;
    private javax.swing.JRadioButton rbManquant;
    private javax.swing.JTextField txtDureeGarantie;
    private javax.swing.JTextField txtEtiquette;
    private javax.swing.JTextField txtRfid;
    private javax.swing.JTextField txtSN;
    private javax.swing.JTextField txtUdid;
    // End of variables declaration//GEN-END:variables
}
