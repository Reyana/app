/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package stock.menu.entrepot.list;

import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;
import stock.base.Ipad;
import stock.menu.FenetreMenuPrincipal;
import stock.menu.entrepot.FenetreMenuEntrepot;
import stock.util.Gestion_Duree_Garantie;
import stock.util.connexion.connexion_bdd;
import stock.util.sql.SQL_function;

/**
 *
 * @author Magency
 */
public class FenetreEntrepotListeiPads extends javax.swing.JFrame {
    
    private List<Ipad> listIpad = new ArrayList<Ipad>();
    private int lieuAffiche = 0;        // 0 = Tous, 1 = Entrepot, 2 = OP
    private int etatAffiche = 0;        // 0 = Tous, 1 = Fonctionnels, 2 = Manquants, 3 = Casses
    
    /**
     * Creates new form FenetreEntrepotReception
     */
    public FenetreEntrepotListeiPads() {
        initComponents();
        
        //Charger la liste de tous les iPads de la BDD
        connexion_bdd bdd = new connexion_bdd();
        this.listIpad = SQL_function.getListIpadsBDD(bdd.getserver().getstatement());
        bdd.closeall();
        
        // Affiche la liste dans la JTable
        afficheListIpads();
        
        // Cache de base le bouton supprimer un iPad
        this.btnSupprimer.setVisible(false);
    }

    public FenetreEntrepotListeiPads(int longueur, int largeur) {
        this();
        this.setSize(new java.awt.Dimension(longueur, largeur));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        bgLieu = new javax.swing.ButtonGroup();
        bgEtat = new javax.swing.ButtonGroup();
        btnRetour = new javax.swing.JButton();
        btnHome = new javax.swing.JButton();
        jScrollPane = new javax.swing.JScrollPane();
        tabIpads = new javax.swing.JTable();
        panelBoutons = new javax.swing.JPanel();
        btnAjout = new javax.swing.JButton();
        btnModifier = new javax.swing.JButton();
        btnReporterPb = new javax.swing.JButton();
        labelNomFenetre = new javax.swing.JLabel();
        panelLieu = new javax.swing.JPanel();
        rbEntrepot = new javax.swing.JRadioButton();
        rbOP = new javax.swing.JRadioButton();
        rbTousLieux = new javax.swing.JRadioButton();
        panelEtat = new javax.swing.JPanel();
        rbFonctionnels = new javax.swing.JRadioButton();
        rbManquant = new javax.swing.JRadioButton();
        rbCasses = new javax.swing.JRadioButton();
        rbTousEtat = new javax.swing.JRadioButton();
        panelTexte = new javax.swing.JPanel();
        labelBas1 = new javax.swing.JLabel();
        txtNbAffiches = new javax.swing.JLabel();
        labelBas2 = new javax.swing.JLabel();
        panelBoutonSupprimer = new javax.swing.JPanel();
        btnSupprimer = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(800, 600));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        btnRetour.setIcon(new javax.swing.ImageIcon(getClass().getResource("/stock/images/Bouton Retour.png"))); // NOI18N
        btnRetour.setToolTipText("Retour");
        btnRetour.setBorderPainted(false);
        btnRetour.setContentAreaFilled(false);
        btnRetour.setMinimumSize(new java.awt.Dimension(32, 32));
        btnRetour.setPreferredSize(new java.awt.Dimension(32, 32));
        btnRetour.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnRetourMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 0);
        getContentPane().add(btnRetour, gridBagConstraints);

        btnHome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/stock/images/Bouton Home.PNG"))); // NOI18N
        btnHome.setToolTipText("Menu principal");
        btnHome.setBorderPainted(false);
        btnHome.setContentAreaFilled(false);
        btnHome.setMaximumSize(new java.awt.Dimension(32, 32));
        btnHome.setMinimumSize(new java.awt.Dimension(32, 32));
        btnHome.setPreferredSize(new java.awt.Dimension(32, 32));
        btnHome.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnHomeMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        getContentPane().add(btnHome, gridBagConstraints);

        jScrollPane.setMinimumSize(new java.awt.Dimension(512, 512));

        tabIpads.setAutoCreateRowSorter(true);
        tabIpads.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        tabIpads.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Numéro", "Numéro de série", "UDID", "Code RFID", "Etiquette", "Date d'achat", "Durée de garantie", "OP"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabIpads.setGridColor(new java.awt.Color(102, 102, 102));
        tabIpads.setRowHeight(30);
        tabIpads.setSelectionBackground(new java.awt.Color(153, 204, 255));
        tabIpads.setSelectionForeground(new java.awt.Color(0, 0, 0));
        jScrollPane.setViewportView(tabIpads);
        tabIpads.getColumnModel().getColumn(0).setPreferredWidth(30);
        tabIpads.getColumnModel().getColumn(0).setMaxWidth(55);
        tabIpads.getColumnModel().getColumn(1).setPreferredWidth(100);
        tabIpads.getColumnModel().getColumn(1).setMaxWidth(200);
        tabIpads.getColumnModel().getColumn(5).setPreferredWidth(55);
        tabIpads.getColumnModel().getColumn(5).setMaxWidth(75);
        tabIpads.getColumnModel().getColumn(6).setPreferredWidth(40);
        tabIpads.getColumnModel().getColumn(6).setMaxWidth(105);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jScrollPane, gridBagConstraints);

        panelBoutons.setLayout(new java.awt.GridBagLayout());

        btnAjout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/stock/images/Bouton Ajout iPad.PNG"))); // NOI18N
        btnAjout.setToolTipText("Ajout d'un nouvel iPad dans la base de données");
        btnAjout.setBorderPainted(false);
        btnAjout.setContentAreaFilled(false);
        btnAjout.setFocusPainted(false);
        btnAjout.setMinimumSize(new java.awt.Dimension(128, 128));
        btnAjout.setPreferredSize(new java.awt.Dimension(128, 128));
        btnAjout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAjoutMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        panelBoutons.add(btnAjout, gridBagConstraints);

        btnModifier.setIcon(new javax.swing.ImageIcon(getClass().getResource("/stock/images/Bouton Modifier.PNG"))); // NOI18N
        btnModifier.setToolTipText("Modification des informations d'un iPad dans la base de données");
        btnModifier.setBorderPainted(false);
        btnModifier.setContentAreaFilled(false);
        btnModifier.setMinimumSize(new java.awt.Dimension(128, 128));
        btnModifier.setPreferredSize(new java.awt.Dimension(128, 128));
        btnModifier.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnModifierMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(20, 10, 20, 10);
        panelBoutons.add(btnModifier, gridBagConstraints);

        btnReporterPb.setIcon(new javax.swing.ImageIcon(getClass().getResource("/stock/images/Bouton Casse.PNG"))); // NOI18N
        btnReporterPb.setToolTipText("Indication d'un problème sur un iPad");
        btnReporterPb.setBorderPainted(false);
        btnReporterPb.setContentAreaFilled(false);
        btnReporterPb.setMinimumSize(new java.awt.Dimension(128, 128));
        btnReporterPb.setPreferredSize(new java.awt.Dimension(128, 128));
        btnReporterPb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnReporterPbMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        panelBoutons.add(btnReporterPb, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(panelBoutons, gridBagConstraints);

        labelNomFenetre.setFont(new java.awt.Font("Lucida Grande", 1, 36)); // NOI18N
        labelNomFenetre.setForeground(new java.awt.Color(51, 51, 51));
        labelNomFenetre.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelNomFenetre.setText("Entrepôt : Liste d'iPads");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        getContentPane().add(labelNomFenetre, gridBagConstraints);

        panelLieu.setLayout(new java.awt.GridBagLayout());

        bgLieu.add(rbEntrepot);
        rbEntrepot.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        rbEntrepot.setText("A l'entrepôt");
        rbEntrepot.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                rbEntrepotMousePressed(evt);
            }
        });
        panelLieu.add(rbEntrepot, new java.awt.GridBagConstraints());

        bgLieu.add(rbOP);
        rbOP.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        rbOP.setText("En OP");
        rbOP.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                rbOPMousePressed(evt);
            }
        });
        panelLieu.add(rbOP, new java.awt.GridBagConstraints());

        bgLieu.add(rbTousLieux);
        rbTousLieux.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        rbTousLieux.setSelected(true);
        rbTousLieux.setText("Tous");
        rbTousLieux.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                rbTousLieuxMousePressed(evt);
            }
        });
        panelLieu.add(rbTousLieux, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        getContentPane().add(panelLieu, gridBagConstraints);

        panelEtat.setLayout(new java.awt.GridBagLayout());

        bgEtat.add(rbFonctionnels);
        rbFonctionnels.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        rbFonctionnels.setText("Fonctionnels");
        rbFonctionnels.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                rbFonctionnelsMousePressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        panelEtat.add(rbFonctionnels, gridBagConstraints);

        bgEtat.add(rbManquant);
        rbManquant.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        rbManquant.setText("Manquants");
        rbManquant.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                rbManquantMousePressed(evt);
            }
        });
        panelEtat.add(rbManquant, new java.awt.GridBagConstraints());

        bgEtat.add(rbCasses);
        rbCasses.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        rbCasses.setText("Cassés");
        rbCasses.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                rbCassesMousePressed(evt);
            }
        });
        panelEtat.add(rbCasses, new java.awt.GridBagConstraints());

        bgEtat.add(rbTousEtat);
        rbTousEtat.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        rbTousEtat.setSelected(true);
        rbTousEtat.setText("Tous");
        rbTousEtat.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                rbTousEtatMousePressed(evt);
            }
        });
        panelEtat.add(rbTousEtat, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        getContentPane().add(panelEtat, gridBagConstraints);

        panelTexte.setLayout(new java.awt.GridBagLayout());

        labelBas1.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        labelBas1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelBas1.setText("Total affiché(s) : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        panelTexte.add(labelBas1, gridBagConstraints);

        txtNbAffiches.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        txtNbAffiches.setForeground(new java.awt.Color(51, 51, 51));
        txtNbAffiches.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        txtNbAffiches.setText("_");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        panelTexte.add(txtNbAffiches, gridBagConstraints);

        labelBas2.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        labelBas2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelBas2.setText(" iPad(s)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        panelTexte.add(labelBas2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        getContentPane().add(panelTexte, gridBagConstraints);

        panelBoutonSupprimer.setLayout(new java.awt.GridBagLayout());

        btnSupprimer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/stock/images/Bouton X.PNG"))); // NOI18N
        btnSupprimer.setToolTipText("Suppression de l'iPad selectionné de la base de données");
        btnSupprimer.setBorderPainted(false);
        btnSupprimer.setContentAreaFilled(false);
        btnSupprimer.setMinimumSize(new java.awt.Dimension(32, 32));
        btnSupprimer.setPreferredSize(new java.awt.Dimension(32, 32));
        btnSupprimer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSupprimerMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 0);
        panelBoutonSupprimer.add(btnSupprimer, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(panelBoutonSupprimer, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRetourMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRetourMouseClicked
        FenetreMenuEntrepot fMenuEntrepot = new FenetreMenuEntrepot(this.getWidth(), this.getHeight());
        fMenuEntrepot.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnRetourMouseClicked

    private void btnHomeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnHomeMouseClicked
        FenetreMenuPrincipal fMenuPrincipal = new FenetreMenuPrincipal(this.getWidth(), this.getHeight());
        fMenuPrincipal.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnHomeMouseClicked

    private void btnAjoutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAjoutMouseClicked
        DialogueAjoutIpad dAjout = new DialogueAjoutIpad(this, true, this.getWidth(), this.getHeight());
        dAjout.setVisible(true);
        //MAJ nb Ipads
        this.txtNbAffiches.setText(String.valueOf(this.tabIpads.getRowCount()));
    
    }//GEN-LAST:event_btnAjoutMouseClicked

    private void btnModifierMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnModifierMouseClicked
        DialogueModifIpad dModif = new DialogueModifIpad(this, true, this.getWidth(), this.getHeight());
        dModif.setVisible(true);
    }//GEN-LAST:event_btnModifierMouseClicked

    private void btnSupprimerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSupprimerMouseClicked
        if(this.tabIpads.getSelectedRow() > - 1)
        {
            //Recuperation dans la JTable de l'index de l'iPad selectionne dans la BDD
            Integer id_ipad = (Integer)this.tabIpads.getValueAt(this.tabIpads.getSelectedRow(), 0);

            // Affichage du dialgue de confirmation
            DialogueSupprIpad dSuppr = new DialogueSupprIpad(this, true, this.getWidth(), this.getHeight(), id_ipad);
            dSuppr.setVisible(true);
        }
    }//GEN-LAST:event_btnSupprimerMouseClicked

    private void rbFonctionnelsMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rbFonctionnelsMousePressed
        if(this.btnSupprimer.isVisible())
        {
            this.btnSupprimer.setVisible(false);
        }
        this.etatAffiche = 1;
        refreshJTable();        
    }//GEN-LAST:event_rbFonctionnelsMousePressed

    private void rbManquantMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rbManquantMousePressed
        if(!this.btnSupprimer.isVisible())
        {
            this.btnSupprimer.setVisible(true);
        }
        this.etatAffiche = 2;
        refreshJTable();         
    }//GEN-LAST:event_rbManquantMousePressed

    private void rbCassesMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rbCassesMousePressed
        if(!this.btnSupprimer.isVisible())
        {
            this.btnSupprimer.setVisible(true);
        }
        this.etatAffiche = 3;
        refreshJTable();       
    }//GEN-LAST:event_rbCassesMousePressed

    private void rbTousEtatMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rbTousEtatMousePressed
        if(this.btnSupprimer.isVisible())
        {
            this.btnSupprimer.setVisible(false);
        }
        this.etatAffiche = 0;
        refreshJTable();
    }//GEN-LAST:event_rbTousEtatMousePressed

    private void rbEntrepotMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rbEntrepotMousePressed
        this.lieuAffiche = 1;
        refreshJTable();
    }//GEN-LAST:event_rbEntrepotMousePressed

    private void rbOPMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rbOPMousePressed
        this.lieuAffiche = 2;
        refreshJTable();
    }//GEN-LAST:event_rbOPMousePressed

    private void rbTousLieuxMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rbTousLieuxMousePressed
        this.lieuAffiche = 0;
        refreshJTable();
    }//GEN-LAST:event_rbTousLieuxMousePressed

    private void btnReporterPbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnReporterPbMouseClicked
        DialogueReporterProbleme dReportCasse = new DialogueReporterProbleme(this, true, this.getWidth(), this.getHeight());
        dReportCasse.setVisible(true);
    }//GEN-LAST:event_btnReporterPbMouseClicked

    
    /**
     * Actualise l'affichage de la JTable
     */
    private void afficheListIpads()
    {
        int i;
        
        //Efface le contenu de la JTable
        clearJTable();
        
        // Affichage de chaque iPad de la liste dans la JTable
        for(i = 0; i < this.listIpad.size(); i++)
        {
            afficheIpad(this.listIpad.get(i));
        }

        //MAJ nb Ipads affiches
        this.txtNbAffiches.setText(String.valueOf(this.tabIpads.getRowCount()));
    }
    
    
    
    /**
     * Remets a jour la liste des iPads affiches
     */
    public void refreshJTable()
    {
        connexion_bdd bdd = new connexion_bdd();
        
        switch(this.etatAffiche)
        {
            case 0:
                switch(this.lieuAffiche)
                {
                    case 0:
                        // Charger la liste de tous les iPads de la BDD
                        this.listIpad = SQL_function.getListIpadsBDD(bdd.getserver().getstatement());
                        break;

                    case 1:
                        //Charger la liste de tous les iPads stockes a l'entrepot de la BDD
                        this.listIpad = SQL_function.getListIpadsEntrepotBDD(bdd.getserver().getstatement());
                        break;

                    case 2:
                        //Charger la liste de tous les iPads en OP de la BDD
                        this.listIpad = SQL_function.getListIpadsOPBDD(bdd.getserver().getstatement());
                        break;
                }
                break;
                
            case 1:
                switch(this.lieuAffiche)
                {
                    case 0:
                        // Charger la liste de tous les iPads fonctionnels de la BDD
                        this.listIpad = SQL_function.getListIpadsFonctionnelsBDD(bdd.getserver().getstatement());
                        break;

                    case 1:
                        //Charger la liste de tous les iPads fonctionnels stockes a l'entrepot de la BDD
                        this.listIpad = SQL_function.getListIpadsFonctionnelsEntrepotBDD(bdd.getserver().getstatement());
                        break;

                    case 2:
                        //Charger la liste de tous les iPads fonctionnels en OP de la BDD
                        this.listIpad = SQL_function.getListIpadsFonctionnelsOPBDD(bdd.getserver().getstatement());
                        break;       
                }
                break;
                     
            case 2:
                switch(this.lieuAffiche)
                {
                    case 0:
                        // Charger la liste de tous les iPads manquants de la BDD
                        this.listIpad = SQL_function.getListIpadsManquantsBDD(bdd.getserver().getstatement());
                        break;

                    case 1:
                        //Charger la liste de tous les iPads manquants stockes a l'entrepot de la BDD
                        this.listIpad = SQL_function.getListIpadsManquantsEntrepotBDD(bdd.getserver().getstatement());
                        break;

                    case 2:
                        //Charger la liste de tous les iPads manquants en OP de la BDD
                        this.listIpad = SQL_function.getListIpadsManquantsOPBDD(bdd.getserver().getstatement());
                        break;       
                }
                break;
                         
            case 3:
                switch(this.lieuAffiche)
                {
                    case 0:
                        // Charger la liste de tous les iPads casses de la BDD
                        this.listIpad = SQL_function.getListIpadsCassesBDD(bdd.getserver().getstatement());
                        break;

                    case 1:
                        //Charger la liste de tous les iPads casses stockes a l'entrepot de la BDD
                        this.listIpad = SQL_function.getListIpadsCassesEntrepotBDD(bdd.getserver().getstatement());
                        break;

                    case 2:
                        //Charger la liste de tous les iPads casses en OP de la BDD
                        this.listIpad = SQL_function.getListIpadsCassesOPBDD(bdd.getserver().getstatement());
                        break;
                }
                break;
        }
        bdd.closeall();
        
        // Affiche la liste dans la JTable
        afficheListIpads();
    }
    
    
    /**
     * @brief Efface le contenu de la JTable
     */
    public void clearJTable()
    {
        int i;
        // Recupere le modele pour supprimer chaque ligne
        DefaultTableModel dtm = (DefaultTableModel)this.tabIpads.getModel();
        if(dtm.getRowCount() > 0)
        {
            for(i = dtm.getRowCount() - 1; i >= 0 ; i--)
            {
                dtm.removeRow(i);
                dtm.fireTableRowsDeleted(i - 1, i - 1);
            }
        }
    }
    
    
    /**
     * @brief Affiche dans la JTable de la fenetre l'iPad passe en parametre (place en fin de liste)
     * 
     * @param iPad iPad a ajouter dans la liste d'affichage
     */
    private void afficheIpad(Ipad iPad)
    {
        // Recupere le modele pour ajouter de nouvelles lignes
        DefaultTableModel dtm = (DefaultTableModel)this.tabIpads.getModel();
        // Dimensions reinitialisees par l'appel ci-dessus, donc redimension
        tabIpads.getColumnModel().getColumn(0).setPreferredWidth(30);
        tabIpads.getColumnModel().getColumn(0).setMaxWidth(55);
        tabIpads.getColumnModel().getColumn(1).setPreferredWidth(100);
        tabIpads.getColumnModel().getColumn(1).setMaxWidth(200);
        tabIpads.getColumnModel().getColumn(5).setPreferredWidth(55);
        tabIpads.getColumnModel().getColumn(5).setMaxWidth(75);
        tabIpads.getColumnModel().getColumn(6).setPreferredWidth(40);
        tabIpads.getColumnModel().getColumn(6).setMaxWidth(105);
        
        // Gestion de la durée exacte a afficher
        Gestion_Duree_Garantie duree_exacte = new Gestion_Duree_Garantie();
        String duree_restante = duree_exacte.donne_duree_restant(iPad.getDateAchat());
        
        
        // Mise en vecteur des infos des iPads de la liste
        Vector row = new Vector();
        row.add(iPad.getDbNum());
        row.add(iPad.getNumSerie());
        row.add(iPad.getUdid());
        row.add(iPad.getRfid());
        row.add(iPad.getEtiquette());
        row.add(iPad.getStringDateAchat());
        row.add(duree_restante);
        row.add(iPad.getNomOp());
        
        // Ajout d'une nouvelle ligne avec les donnees de l'iPad ci-dessus
        dtm.addRow(row);
        dtm.fireTableRowsInserted(dtm.getRowCount() - 1, dtm.getRowCount() - 1);
    }
    
    
    
    /**
     * @brief Ajoute et affiche l'iPad passe en parametre
     * 
     * @param iPad iPad a ajouter dans la liste d'affichage
     */
    public void addIpad(Ipad iPad)
    {
        this.listIpad.add(iPad);
        this.afficheIpad(iPad);
    }
  
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgEtat;
    private javax.swing.ButtonGroup bgLieu;
    private javax.swing.JButton btnAjout;
    private javax.swing.JButton btnHome;
    private javax.swing.JButton btnModifier;
    private javax.swing.JButton btnReporterPb;
    private javax.swing.JButton btnRetour;
    private javax.swing.JButton btnSupprimer;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JLabel labelBas1;
    private javax.swing.JLabel labelBas2;
    private javax.swing.JLabel labelNomFenetre;
    private javax.swing.JPanel panelBoutonSupprimer;
    private javax.swing.JPanel panelBoutons;
    private javax.swing.JPanel panelEtat;
    private javax.swing.JPanel panelLieu;
    private javax.swing.JPanel panelTexte;
    private javax.swing.JRadioButton rbCasses;
    private javax.swing.JRadioButton rbEntrepot;
    private javax.swing.JRadioButton rbFonctionnels;
    private javax.swing.JRadioButton rbManquant;
    private javax.swing.JRadioButton rbOP;
    private javax.swing.JRadioButton rbTousEtat;
    private javax.swing.JRadioButton rbTousLieux;
    private javax.swing.JTable tabIpads;
    private javax.swing.JLabel txtNbAffiches;
    // End of variables declaration//GEN-END:variables
}
